第32-33课 异常处理
Exception
1.	什么是异常
https://fishc.com.cn/thread-45814-1-2.html

AssertionError	断言语句（assert）失败
AttributeError	尝试访问未知的对象属性
EOFError	用户输入文件末尾标志EOF（Ctrl+d）
FloatingPointError	浮点计算错误
GeneratorExit	generator.close()方法被调用的时候
ImportError	导入模块失败的时候
IndexError	索引超出序列的范围
KeyError	字典中查找一个不存在的关键字
KeyboardInterrupt	用户输入中断键（Ctrl+c）
MemoryError	内存溢出（可通过删除对象释放内存）
NameError	尝试访问一个不存在的变量
NotImplementedError	尚未实现的方法
OSError	操作系统产生的异常（例如打开一个不存在的文件）
OverflowError	数值运算超出最大限制
ReferenceError	弱引用（weak reference）试图访问一个已经被垃圾回收机制回收了的对象
RuntimeError	一般的运行时错误
StopIteration	迭代器没有更多的值
SyntaxError	Python的语法错误
IndentationError	缩进错误
TabError	Tab和空格混合使用
SystemError	Python编译器系统错误
SystemExit	Python编译器进程被关闭
TypeError	不同类型间的无效操作
UnboundLocalError	访问一个未初始化的本地变量（NameError的子类）
UnicodeError	Unicode相关的错误（ValueError的子类）
UnicodeEncodeError	Unicode编码时的错误（UnicodeError的子类）
UnicodeDecodeError	Unicode解码时的错误（UnicodeError的子类）
UnicodeTranslateError	Unicode转换时的错误（UnicodeError的子类）
ValueError	传入无效的参数
ZeroDivisionError	除数为零
2.	检测异常 try语句
a)	try-except语句
try:
	检测范围
except Exception[as reason]”
	出现异常(Exception) 后的处理代码


except后可以接元组，如except(oserror, typeerror)，同时处理两种异常
b)	try-finally 语句
try:
	检测范围
except Exception[as reason]:
	出现异常(Exception)后的处理代码
finally:
	无论如何都会被执行的代码
	try语句如果没有任何异常，则程序跳过except语句，直接进入finally语句（如果有的话）；如果有异常，先执行except语句，再执行finally语句
c)	raise语句
主动触发一个异常（可以指定是何种异常）
>>> raise ZeroDivisionError('除数为零的异常')
Traceback (most recent call last):
  File "<pyshell#1>", line 1, in <module>
    raise ZeroDivisionError('除数为零的异常')
ZeroDivisionError: 除数为零的异常

31课课后练习：
0.	结合你自身的编程经验，总结下异常处理机制的重要性？
1)	便于程序员找到并排除错误原因，方便后期维护
2)	便于增强用户体验
3)	及时保存数据(finally语句里执行colse()相关语句)
参考答案：
由于环境的不确定性和用户操作的不可预知性都可能导致程序出现各种问题，因此异常机制最重要的无非就是：增强程序的健壮性和用户体验，尽可能地捕获所有预知的异常并写好处理的代码，当异常出现的时候，程序自动消化并恢复正常（不至于崩溃）
1.	请问以下代码是否会产生异常，如果会的话，请写出异常名称：
>>> my_list = [1, 2, 3, 4, ,]
语法错误
SyntaxError: invalid syntax
2.	>>> my_list = [1, 2, 3, 4, 5]
>>>print(my_list[len(my_list)])
访问越界错误
IndexError: list index out of range
3.	>>> my_list = [3, 5, 1, 4, 2]
my_list.sorted()
列表排序是list.sort(),sorted()是BIF，所以会引发AttributeError:’list’object has no attribute ‘sorted’异常
4.	>>> my_dict = {‘host’: ‘bbs.fishc.com’, ‘port’: ‘80’}
>>> print(mydict[‘server’])
键不存在
KeyError:’server’异常
为了避免此类错误，可以使用dict.get():
if not my_dict.get(‘server’):
		Print(‘所访问的键不存在！’)
5.	def my_fun(x, y):
print(x, y)
	my_fun(x=1, 2)
	使用关键字参数需要两个参数均使用关键字f(x = 1. Y = 2)
	SyntaxError: positional argument follows keyword argument
6.	f = open(‘C:\\test.txt’, wb)
f.write(‘I love fishc.com’)
f.close()
wb没有加引号，引发NameError异常
7.	def my_fun1():
x = 5
def my_fun2():
	x *= x
	return x
return my_fun2()
my_fun1()
执行x*=x语句时报错，原因是屏蔽机制导致找不到变量x
需要在该句之前加上nonlocal x
第33课：
0.	我们是用什么方法来处理程序中出现的异常？
try……except
1.	一个try语句可以和多个except语句搭配么？为什么？
可以，因为一段程序内可能出现多累异常
2.	如何统一处理多类异常？
except(OSError, TypeError)类似语句可以处理
3.	except后如果不带任何异常类，Python会捕获所有try语句内的异常并统一处理，为什么不建议这么做？
因为这样会隐蔽所有程序员没想到且未处理好的错误，例如用户输入ctrl+c试图阻止程序会被解释为KeyboardInterrupt异常
4.	如果异常发生在成功打开文件后，Python调到except语句执行，并没有执行关闭文件命令，因此我们需要确保无论如何文件也要被关闭应该怎么做呢？
可以使用finally语句来实现，如果try语句块中没有出现任何错误，会跳过except语句块执行finally语句块的内容。
如果出现异常，则会先执行except语句快的内容再接着执行finally语句块的内容。总之，finally语句块里的内容就是确保无论如何都将被执行的内容！
5.	恢复代码
try: 
	for i in range(3):
			for j in range(3):
				if i == 2:
					raise KeyboardInterrupt
				print(i, j)
	except KeyboardInterrupt:
		print(‘退出啦！’)

