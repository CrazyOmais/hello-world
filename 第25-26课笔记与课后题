第25-26课 字典
1.	映射
字典是python里的一种映射
2.	创建和访问字典
dict1 = {索引(key)1: 内容(value)1，索引2: 内容2…… }
访问：dict1[key]
可以用BIF创建：
Dict1 = dict((key1, value1), (key2, value2)……)
也可以用关键字创建：
dict1 = dict(key1=value1, ……)
创建空字典：dict1 = {}
直接给key赋值：
Dict1 = [‘key’] = value
*key如果是已经有的key，就重新赋值，如果没有该key，就创建一个新key

3.	fromkeys() 
通过key创建字典，不能批量修改值
>>> dict1 = {}
>>> dict1.fromkeys((1,2,3))
{1: None, 2: None, 3: None}
>>> dict1.fromkeys((1,2,3), 'number')
{1: 'number', 2: 'number', 3: 'number'}
>>> dict1.fromkeys((1,2,3),('one','two','three'))
{1: ('one', 'two', 'three'), 2: ('one', 'two', 'three'), 3: ('one', 'two', 'three')}
4.	访问字典：keys(),values(),items()
Keys()返回字典键的引用
Values()返回字典建对应的值
Items()以元组形式返回相应项
例如：
>>> dict1 = dict1.fromkeys(range(32),'赞')
>>> dict1
{0: '赞', 1: '赞', 2: '赞', 3: '赞', 4: '赞', 5: '赞', 6: '赞', 7: '赞', 8: '赞', 9: '赞', 10: '赞', 11: '赞', 12: '赞', 13: '赞', 14: '赞', 15: '赞', 16: '赞', 17: '赞', 18: '赞', 19: '赞', 20: '赞', 21: '赞', 22: '赞', 23: '赞', 24: '赞', 25: '赞', 26: '赞', 27: '赞', 28: '赞', 29: '赞', 30: '赞', 31: '赞'}
>>> for eachKey in dict1.keys():
	print(eachKey,end = ' ')

	
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 
>>> for eachValue in dict1.values():
	print(eachValue,end = ' ')

	
赞 赞 赞 赞 赞 赞 赞 赞 赞 赞 赞 赞 赞 赞 赞 赞 赞 赞 赞 赞 赞 赞 赞 赞 赞 赞 赞 赞 赞 赞 赞 赞
>>> for eachItem in dict1.items():
	print(eachItem,end = ' ')

	
(0, '赞') (1, '赞') (2, '赞') (3, '赞') (4, '赞') (5, '赞') (6, '赞') (7, '赞') (8, '赞') (9, '赞') (10, '赞') (11, '赞') (12, '赞') (13, '赞') (14, '赞') (15, '赞') (16, '赞') (17, '赞') (18, '赞') (19, '赞') (20, '赞') (21, '赞') (22, '赞') (23, '赞') (24, '赞') (25, '赞') (26, '赞') (27, '赞') (28, '赞') (29, '赞') (30, '赞') (31, '赞')
5.	Get()访问字典项
若访问越界，则返回None
>>> print(dict1.get(32))
None
6.	Clear() 清空字典并释放空间
7.	Copy() 浅拷贝字典（不是赋值）
直接赋值传递地址，浅拷贝只传递数据，地址不同
>>> a = {1:'one',2:'two',3:'three'}
>>> b = a.copy()
>>> c = a
>>> id(a)
94531472
>>> id(b)
94589024
>>> id(c)
94531472
8.	Popitem()
随机弹出一个元素（字典里没有确定顺序）
9.	Setdefault()
同get()，但是当字典里没有这个元素时，会默认添加该key，对应value为None
10.	Update()
用其他字典更新原有字典
	>>> a = {1:'one', 2: 'two'}
>>> a.setdefault(1)
'one'
>>> a.setdefault('小白')
>>> a
{1: 'one', 2: 'two', '小白': None}
>>> b = {'小白':'狗'}
>>> a.update(b)
>>> a
{1: 'one', 2: 'two', '小白': '狗'}

25课课后题
0.	“映射”“哈希”“散列”“关系数组”等同于PYTHON里的什么？
字典
1.	尝试一下将数据(‘F’: 70, ’C’: 67, ’h’: 104, i’: 105, ‘s’: 115)创建为字典并访问建’C’对应的值
>>> dict1 = dict((('F', 70), ('C', 67), ('h', 104),('i', 105),('s',115)))
>>> dict1['C']
67
2.	方括号[]括起来的数据叫列表，大括号{}括起来的数据就是字典吗？
不是
>>> a = {1,2,3,4,5}
>>> type(a)
<class 'set'>
3.	有什么事情字典能做到，列表难以实现？
通过一个自定义索引查找内容如果用列表的话可能需要两个以上的列表多次调用才可以实现。
4.	以下创建字典的操作：
>>> a = dict(one = 1, two = 2, three = 3)
>>> b = {'one':1, 'two': 2, 'three': 3}
>>> c = dict(zip(['one','two', 'three'], [1,2,3]))
>>> d = dict([('two', 2), ('one', 1), ('three', 3)])
>>> e = dict({'three': 3, 'one': 1,'two': 2})
	有区别吗？
没有
>>> a
{'one': 1, 'two': 2, 'three': 3}
>>> b
{'one': 1, 'two': 2, 'three': 3}
>>> c
{'one': 1, 'two': 2, 'three': 3}
>>> d
{'two': 2, 'one': 1, 'three': 3}
>>> e
{'three': 3, 'one': 1, 'two': 2}
5.	还原代码
data = ‘1000, 小甲鱼, 男’
MyDict = {}

(MyDict[‘id’], MyDict[‘name’], MyDict[‘sex’]) = data.split(‘,’)

print(“ID: ” + MyDict[‘id’])
print(“Name: ” + MyDict[‘name’])
print(“Sex: ” + MyDict[‘sex’])

26课课后题：
0.	Python字典是否支持一键多值？
不支持，对相同键再次赋值会覆盖上一次的值
1.	在字典中如果为一个不存在的键赋值会怎样？
会自动创建对应的Key，并添加相应的value
2.	成员资格操作符(in   not in )可以检测一个元素是否存在序列中，也可以检测一个Key是否存在字典中，那么哪种检查效率更高？
字典查Key效率更高，因为字典是哈希存贮，不需要使用相应查找算法进行匹配，时间复杂度是O(1)
3.	Python对Key和Value有没有类型限制？
Key必须是可哈希对象，不能是可变类型（变量、列表、字典本身）
Value没有限制，可以是Python的任意对象
4.	目测下边代码执行猴，dict1的内容是什么？
>>> dict1 = {}
>>> dict1.fromkeys((1,2,3),('one','two','three'))
{1: ('one', 'two', 'three'), 2: ('one', 'two', 'three'), 3: ('one', 'two', 'three')}
>>> dict1.fromkeys((1,3),'数字')
{1: '数字', 3: '数字'}
>>> dict1
{}
*参考答案说应该是{1: '数字', 3: '数字'}，因为fromkeys方法是直接创建一个新字典，但是和实际操作情况不符！
5. 将dict1拷贝到dict2
	dict2 = dict1.copy()
