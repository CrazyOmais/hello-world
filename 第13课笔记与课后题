第13课 元组
• 元组和列表在实际使用上非常相似，最大的区别是元组不能随意插入或删除元素
1.	创建和基本操作
和列表不同，初始化时不用[]而用(), 但决定类型的不是()而是”,”, 如果没有()仍有”,”, 创建类型仍然是元组。 用()初始化，元素数必须大于1，小于1创建之后仍然是基本变量类型，如果要创建只有一个元素的元组，需要用temp = (1, )或者temp = 1, 创建空元组用小括号temp = ()
>>> tuple1 = (1,2,3,4,5,6,7,8)
>>> tuple1
(1, 2, 3, 4, 5, 6, 7, 8)
>>> tuple1[1]
2
>>> tuple1[:5]
(1, 2, 3, 4, 5)
>>> tuple2= tuple1[:]
>>> tuple2
(1, 2, 3, 4, 5, 6, 7, 8)
>>> temp=(1)
>>> type(temp)
<class 'int'>
>>> temp = 1,
>>> type(temp)
<class 'tuple'>
2.	更新和删除元组
元组不能直接用基本函数和操作符修改元组的数据，只能通过拷贝和重新赋值修改。
>>> temp = (1,2,3,4)
>>> temp = temp[:2]+('add',) + temp[2:]
>>> temp
(1, 2, 'add', 3, 4)
>>> temp = temp[:2] + temp[3:]
>>> temp
(1, 2, 3, 4)

课后练习
0.	请用一句话描述什么是列表？再用一句话描述什么是元组？
答：列表是可以自由编辑的一组有顺序的数据列的集合
	元组是不可以自由更改数据元素的数据列集合	
参考答案：
列表：一个大仓库，你可以随时往里边添加和删除任何东西。
元组：封闭的列表，一旦定义，就不可改变（不能添加、删除或修改）。
1.	什么情况下你需要使用元组而不是列表？
答： 数据内容需要收到保护的时候
参考答案：当我们希望内容不被轻易改写的时候，我们使用元组（把权力关进牢笼）。
当我们需要频繁修改数据，我们使用列表。
2.	当元组和列表掉下水，你会救谁？
答： 元组吧，列表容易乱
参考答案
如果是我，我会救列表， 因为列表提供了比元组更丰富的内置方法， 这相当大的提高了编程的灵活性。
回头来看下元组， 元组固然安全， 但元组一定创建就无法修改 （除非通过新建一个元组来间接修改，但这就带来了消耗），而我们人是经常摇摆不定的，所以元组只有在特殊的情况才用到，平时还是列表用的多。
3. 请将下图左边列表的内置方法与右边的注释连线，并圈出元组可以使用的方
法。
	【这个题显示不出来】
4. 创建一个元组，什么情况下逗号和小括号必须同时存在，缺一不可？
	参考答案：
	在拼接只有一个元素的元组的时候，例如我们课上举的例题：
1. >>> temp = ( ‘小甲鱼’ , ‘黑夜’ , ‘迷途’ , ‘小布丁’)
2. # 如果我想在“黑夜”和“迷途”之间插入“怡静”，我们应该：
3. >>> temp = temp[:2] + ( ‘怡静’ ,) + temp[2:]
5. x, y, z = 1, 2, 3 请问 x, y, z 是元组吗？
答：不是
参考答案：所有的多对象的、 逗号分隔的、没有明确用符号定义的这些集合默认的类型都是元组，自己在 IDLE 中键入以下代码，并体会一下：
>>> x,y,z = 1,2,3
>>> type(x)
<class 'int'>
>>> h=x,y,z
>>> type(h)
<class 'tuple'>
6. 请写出以下情景中应该使用列表还是元组来保存数据：
1) 游戏中角色的属性：列表
2) 你的身份证信息：元组
3) 论坛的会员：列表
4) 团队合作开发程序，传递给一个你并不了解具体实现的函数的参数：元组
5) 航天火箭各个组件的具体配置参数：元组
6) NASA 系统中记录已经发现的行星数据：列表
7. 上节课我们通过课后作业的形式学习到了“列表推导式”，那请问如果我把中括号改为小括号，会不会得到“元组推导式”呢？
参考答案：
Python3 木有“元组推导式”，为嘛？没必要丫，有了“列表推导式”已经足够了。
那为什么“ >>> tuple1 = (x**2 for x in range(10)) ”不会报错？
因为你误打误撞得到了一个生成器：
1. >>> type(tuple1) 
2. <class 'generator'>
关于生成器的概念小甲鱼今后会细讲，你可以尝试这么去访问我们刚刚的生成
器：
# 注意， Python3 开始 next() 方法改为 __next__() 哦~ 
1. >>> tuple1.__next__() 
2. 0 
3. >>> tuple1.__next__() 
4. 1 
5. >>> tuple1.__next__() 
6. 4 
7. >>> tuple1.__next__() 
8. 9 
9. >>> tuple1.__next__() 
10. 16 
11. >>> tuple1.__next__() 
12. 25 
13. >>> tuple1.__next__() 
14. 36
